{"version":3,"sources":["components/Editor.js","App.js","serviceWorker.js","index.js"],"names":["Editor","props","selectedBlock","converter","showdown","Converter","turndownService","TurndownService","headingStyle","bulletListMarker","use","gfm","$","on","e","oldSelectedBlock","window","getSelection","anchorNode","closest","console","log","data","html","turndown","outerHTML","css","isSameNode","replaceWith","makeHtml","innerHTML","replace","id","className","contentEditable","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4WA2EeA,E,kDAjEb,WAAYC,GAAQ,uCACZA,G,gEAIN,IAIIC,EAJEC,EAAY,IAAIC,IAASC,UACzBC,EAAkB,IAAIC,IAAgB,CAAEC,aAAc,MAAOC,iBAAkB,MACrFH,EAAgBI,IAAIC,KAGpBC,IAAE,kBAAkBC,GAAG,mCAAmC,SAACC,GACzD,IAAIC,EACDb,IACDa,EAAmBb,GAErBA,EAAgBU,IAAEI,OAAOC,eAAeC,YAAYC,QAAQ,sBAG5DC,QAAQC,IAAInB,EAAcoB,KAAK,aAC5BpB,GAAiBA,EAAc,KAAOA,EAAcoB,KAAK,cAC1DpB,EAAcqB,KAAKjB,EAAgBkB,SAAStB,EAAc,GAAGuB,YAAc,UAC3EvB,EAAcoB,KAAK,YAAY,GAC/BpB,EAAcwB,IAAI,cAAe,QAIhCX,GAAoBA,EAAiB,IAAMb,GAAiBA,EAAc,KAAOa,EAAiB,GAAGY,WAAWzB,EAAc,KAC/Ha,EAAiBa,YAAYzB,EAAU0B,SAASd,EAAiB,GAAGe,WAAWC,QAAQ,MAAO,U,+BAOlG,OAAO,yBAAKC,GAAG,gBAAgBC,UAAU,wBAAwBC,gBAAgB,QAC7E,2BAAG,uEACD,+BAAI,8GACF,4FACA,yCACA,yCACA,yCACA,sCAAW,6CAAX,KACA,sCAAW,8CACX,sCAAW,uCACX,2BAAG,2CACH,2BAAG,mDAGH,4BACA,0CACA,2CAEA,4BACA,2CACA,8CAGA,2BAAG,+CAAH,IAAgC,+CAAhC,2BAAgF,gCAAQ,qDAAxF,sBAEA,kC,GA5DSC,IAAMC,WCDZC,MANf,WACE,OACE,kBAAC,EAAD,OCQgBC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.ae184251.chunk.js","sourcesContent":["/* eslint-disable no-useless-constructor */\r\nimport React from 'react';\r\nimport './Editor.scss'\r\nimport $ from 'jquery';\r\nimport showdown from 'showdown';\r\nimport TurndownService from 'turndown';\r\nimport { gfm } from 'turndown-plugin-gfm';\r\n\r\n\r\nclass Editor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n   }\r\n\r\n  componentDidMount() {\r\n    const converter = new showdown.Converter();\r\n    const turndownService = new TurndownService({ headingStyle: 'atx', bulletListMarker: '-' });\r\n    turndownService.use(gfm);\r\n\r\n    let selectedBlock;\r\n    $('#Joplin-mockup').on('keydown keyup mousedown mouseup', (e) => {\r\n      let oldSelectedBlock;\r\n      if(selectedBlock) {\r\n        oldSelectedBlock = selectedBlock;\r\n      }\r\n      selectedBlock = $(window.getSelection().anchorNode).closest('#Joplin-mockup > *');\r\n      \r\n      // make sure selected block is in edit mode\r\n      console.log(selectedBlock.data('editMode'));\r\n      if(selectedBlock && selectedBlock[0] && !selectedBlock.data('editMode')) {\r\n        selectedBlock.html(turndownService.turndown(selectedBlock[0].outerHTML) || '<br />');\r\n        selectedBlock.data('editMode', true);\r\n        selectedBlock.css('white-space', 'pre');\r\n      }\r\n\r\n      // reset the old node upon exit\r\n      if(oldSelectedBlock && oldSelectedBlock[0] && selectedBlock && selectedBlock[0] && !oldSelectedBlock[0].isSameNode(selectedBlock[0])) {\r\n        oldSelectedBlock.replaceWith(converter.makeHtml(oldSelectedBlock[0].innerHTML).replace(/\\\\/g, ''));\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <div id=\"Joplin-mockup\" className=\"Joplin-mockup content\" contentEditable=\"true\">\r\n        <p><b>Joplin-Inline Markdown editor DRAFT 1  </b></p> \r\n          <p> <i>This was made in 2 days and does not represent what the final project would be</i></p>\r\n            <p>The content would not move from it place in the final project</p>\r\n            <h1>Heading 1</h1>\r\n            <h2>Heading 2</h2>\r\n            <h3>Heading 3</h3>\r\n            <p>This is <strong>Bold Text</strong> </p>\r\n            <p>This is <em>emphasis Text</em></p>\r\n            <p>This is <code>code</code></p>\r\n            <p><strike>strike</strike></p>\r\n            <p><blockquote>\r\n            Blockquote\r\n            </blockquote></p>\r\n            <ul>\r\n            <li>list items</li>\r\n            <li>list items</li>\r\n            </ul>\r\n            <ol>\r\n            <li>number list</li>\r\n            <li>numbered list</li>\r\n            </ol>\r\n\r\n            <p><strong>Lorem ipsum</strong> <em>dolor sit amet,</em> consectetur adipiscing <strong><em>elit, sed do eiusmod</em></strong> tempor incididunt \r\n            </p>\r\n            <br/>\r\n\r\n            </div>\r\n  }\r\n}\r\n\r\nexport default Editor;\r\n\r\n\r\n\r\n","import React from 'react';\nimport Editor from './components/Editor'\nfunction App() {\n  return (\n    <Editor />\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}